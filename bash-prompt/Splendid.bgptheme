# Splendid theme for gitprompt.sh
# This theme uses Font Awesome, so make sure it is installed on your machine.
# Font awesome is available at: https://github.com/FortAwesome/Font-Awesome/raw/master/fonts/fontawesome-webfont.ttf
# Copy it in your ~/.fonts

unset_git_prompt_colors() {
  unset Time12a
  unset PathShort
  unset GIT_PROMPT_PREFIX
  unset GIT_PROMPT_SUFFIX
  unset GIT_PROMPT_SEPARATOR
  unset GIT_PROMPT_BRANCH
  unset GIT_PROMPT_STAGED
  unset GIT_PROMPT_CONFLICTS
  unset GIT_PROMPT_CHANGED
  unset GIT_PROMPT_REMOTE
  unset GIT_PROMPT_UNTRACKED
  unset GIT_PROMPT_STASHED
  unset GIT_PROMPT_CLEAN
  unset GIT_PROMPT_COMMAND_OK
  unset GIT_PROMPT_COMMAND_FAIL
  unset GIT_PROMPT_VIRTUALENV
  unset GIT_PROMPT_START_USER
  unset GIT_PROMPT_START_ROOT
  unset GIT_PROMPT_END_USER
  unset GIT_PROMPT_END_ROOT
  unset GIT_PROMPT_SYMBOLS_AHEAD
  unset GIT_PROMPT_SYMBOLS_BEHIND
  unset GIT_PROMPT_SYMBOLS_PREHASH
  unset GIT_PROMPT_SYMBOLS_NO_REMOTE_TRACKING
}

define_undefined_git_prompt_colors() {
  if [[ -z ${GIT_PROMPT_THEME_NAME} ]]; then GIT_PROMPT_THEME_NAME="Splendid"; fi

  # These are the color definitions used by gitprompt.sh
  if [[ -z ${GIT_PROMPT_SEPARATOR} ]]; then GIT_PROMPT_SEPARATOR=" |"; fi              # separates each item

  if [[ -z ${GIT_PROMPT_STAGED} ]]; then GIT_PROMPT_STAGED="  "; fi           # the number of staged files/directories
  if [[ -z ${GIT_PROMPT_CONFLICTS} ]]; then GIT_PROMPT_CONFLICTS=" "; fi       # the number of files in conflict
  if [[ -z ${GIT_PROMPT_CHANGED} ]]; then GIT_PROMPT_CHANGED="  "; fi        # the number of changed files

  if [[ -z ${GIT_PROMPT_REMOTE} ]]; then GIT_PROMPT_REMOTE="  "; fi                 # the remote branch name (if any) and the symbols for ahead and behind
  if [[ -z ${GIT_PROMPT_UNTRACKED} ]]; then GIT_PROMPT_UNTRACKED="  "; fi       # the number of untracked files/dirs
  if [[ -z ${GIT_PROMPT_STASHED} ]]; then GIT_PROMPT_STASHED="  "; fi    # the number of stashed files/dir
  if [[ -z ${GIT_PROMPT_CLEAN} ]]; then GIT_PROMPT_CLEAN=""; fi      # a colored flag indicating a "clean" repo

  # Please do not add colors to these symbols
  if [[ -z ${GIT_PROMPT_SYMBOLS_AHEAD} ]]; then GIT_PROMPT_SYMBOLS_AHEAD="  "; fi             # The symbol for "n versions ahead of origin"
  if [[ -z ${GIT_PROMPT_SYMBOLS_BEHIND} ]]; then GIT_PROMPT_SYMBOLS_BEHIND="  "; fi            # The symbol for "n versions behind of origin"
  if [[ -z ${GIT_PROMPT_SYMBOLS_PREHASH} ]]; then GIT_PROMPT_SYMBOLS_PREHASH=":"; fi            # Written before hash of commit, if no name could be found
  if [[ -z ${GIT_PROMPT_SYMBOLS_NO_REMOTE_TRACKING} ]]; then GIT_PROMPT_SYMBOLS_NO_REMOTE_TRACKING=" "; fi # This symbol is written after the branch, if the branch is not tracked
}

# call only from theme file
reload_git_prompt_colors() {
  if [[ "${GIT_PROMPT_THEME_NAME}" != $1 ]]; then
    unset_git_prompt_colors
    override_git_prompt_colors
    define_undefined_git_prompt_colors
  fi
}

if [[ "${GIT_PROMPT_THEME}" == "Splendid" && "${GIT_PROMPT_THEME_NAME}" != "Splendid" ]]; then
  define_helpers
  define_undefined_git_prompt_colors
fi
